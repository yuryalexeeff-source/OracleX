import os
import random
import asyncio
from datetime import date
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# ====== –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è ======
tarot_cards = {
    "–ú–∞–≥": {"upright": "–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, —ç–Ω–µ—Ä–≥–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ.",
            "reversed": "–ó–∞–¥–µ—Ä–∂–∫–∏, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –æ–±–º–∞–Ω, —Å–æ–º–Ω–µ–Ω–∏—è."},
    "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞": {"upright": "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –∑–∞–±–æ—Ç–∞, —Ä–æ—Å—Ç –∏ –ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ, –≥–∞—Ä–º–æ–Ω–∏—è –≤ —Å–µ–º—å–µ.",
                    "reversed": "–õ–µ–Ω—å, –∑–∞—Å—Ç–æ–π, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–±–æ—Ç—ã –∏ –≤–Ω–∏–º–∞–Ω–∏—è, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –¥–æ–º–∞."},
    "–ë–∞—à–Ω—è": {"upright": "–í–Ω–µ–∑–∞–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω—ã, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ, –æ—á–∏—â–µ–Ω–∏–µ.",
              "reversed": "–û—Ç–∫–∞–∑ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω—ã, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Å—É–¥—å–±–µ, —Å—Ç—Ä–∞—Ö –Ω–æ–≤–æ–≥–æ."},
    "–°–æ–ª–Ω—Ü–µ": {"upright": "–£—Å–ø–µ—Ö, —Ä–∞–¥–æ—Å—Ç—å, –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ.",
               "reversed": "–ù–µ—Å–µ—Ä—å—ë–∑–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ, –∑–∞–¥–µ—Ä–∂–∫–∏ —É—Å–ø–µ—Ö–∞, –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å."},
    "–õ—É–Ω–∞": {"upright": "–ò–Ω—Ç—É–∏—Ü–∏—è, —Ç–∞–π–Ω—ã, —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ –Ω–æ—á—å—é.",
             "reversed": "–ò–ª–ª—é–∑–∏–∏, –∑–∞–±–ª—É–∂–¥–µ–Ω–∏—è, —Å—Ç—Ä–∞—Ö–∏, –ø–æ—Ç–µ—Ä—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."}
}

runes = {
    "–§–µ—Ö—É": "–ë–æ–≥–∞—Ç—Å—Ç–≤–æ, —Ä–µ—Å—É—Ä—Å—ã, —É—Å–ø–µ—Ö –≤ –¥–µ–ª–∞—Ö, –∏–∑–æ–±–∏–ª–∏–µ –∏ –ø—Ä–∏–±—ã–ª—å.",
    "–£—Ä—É–∑": "–°–∏–ª–∞, —ç–Ω–µ—Ä–≥–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ, —Å—Ç–æ–π–∫–æ—Å—Ç—å, —É–ø–æ—Ä—Å—Ç–≤–æ.",
    "–ê–Ω—Å—É–∑": "–û–±—â–µ–Ω–∏–µ, –∑–Ω–∞–Ω–∏—è, —Å–æ–≤–µ—Ç—ã –º—É–¥—Ä–µ—Ü–æ–≤, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ.",
    "–¢–µ–π–≤–∞–∑": "–°–º–µ–ª–æ—Å—Ç—å, –ø–æ–±–µ–¥–∞ –≤ —Å—Ä–∞–∂–µ–Ω–∏–∏, –∑–∞—â–∏—Ç–∞, —á–µ—Å—Ç—å.",
    "–ô–µ—Ä–∞": "–¶–∏–∫–ª—ã, –ø–ª–æ–¥—ã —É—Å–∏–ª–∏–π, –ø—Ä–æ–≥—Ä–µ—Å—Å, —É—Ä–æ–∂–∞–π –∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ."
}

oracle = {
    "–ü—É—Ç—å": "–í—Ä–µ–º—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π, –¥–µ–π—Å—Ç–≤—É–π —Å–º–µ–ª–æ, –æ—Ç–∫—Ä—ã–≤–∞–π –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã.",
    "–ë–∞–ª–∞–Ω—Å": "–ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≥–∞—Ä–º–æ–Ω–∏—é –º–µ–∂–¥—É –¥–µ–ª–æ–º –∏ –æ—Ç–¥—ã—Ö–æ–º, –ø—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ.",
    "–°–≤–µ—Ç": "–û–ø—Ç–∏–º–∏–∑–º –∏ –≤–µ—Ä–∞ –ø—Ä–∏–≤–µ–¥—É—Ç –∫ —É—Å–ø–µ—Ö—É, –±—É–¥—å —á–µ—Å—Ç–µ–Ω —Å —Å–æ–±–æ–π.",
    "–¢–µ–Ω—å": "–ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω, –∏–∑–±–µ–≥–∞–π –æ–±–º–∞–Ω–∞, –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–∫—Ä—ã—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã.",
    "–°–∏–ª–∞ –¥—É—Ö–∞": "–î–µ—Ä–∂–∏—Å—å —Å–≤–æ–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—è–∂–µ–ª–æ, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ–º–æ–≥—É—Ç."
}

# ====== –ù–æ–≤—ã–µ –≥–∞–¥–∞–Ω–∏—è ======
cards_deck = [f"{rank} {suit}" for suit in ["‚ô•", "‚ô¶", "‚ô£", "‚ô†"] for rank in list(range(6, 11)) + ["J","Q","K","A"]]
dice_faces = [1,2,3,4,5,6]

# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
paper_answers = ["–î–∞", "–ù–µ—Ç", "–í–æ–∑–º–æ–∂–Ω–æ", "–°–∫–æ—Ä–æ", "–ù–µ —Å–µ–π—á–∞—Å", "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ", "–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–∞", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –Ω–µ—Ç", "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ"]
matches_answers = ["–î–∞", "–ù–µ—Ç", "–°–∫–æ—Ä–æ", "–ù–µ –∑–Ω–∞—é", "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ", "–°–∫–æ—Ä–µ–µ –¥–∞", "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç"]
flower_answers = ["–õ—é–±–∏—Ç", "–ù–µ –ª—é–±–∏—Ç", "–ù–µ —É–≤–µ—Ä–µ–Ω", "–°–∫—Ä—ã–≤–∞–µ—Ç —á—É–≤—Å—Ç–≤–∞", "–í–ª—é–±–ª–µ–Ω –ø–æ-—Å–≤–æ–µ–º—É", "–ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å", "–ò–≥—Ä–∞–µ—Ç —Å —á—É–≤—Å—Ç–≤–∞–º–∏"]
magic_ball_answers = ["–î–∞", "–ù–µ—Ç", "–°–∫–æ—Ä–æ", "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞", "–°–æ–º–Ω–µ–≤–∞—é—Å—å"]
crystal_colors = ["–õ—é–±–æ–≤—å", "–£–¥–∞—á–∞", "–ó–¥–æ—Ä–æ–≤—å–µ", "–§–∏–Ω–∞–Ω—Å—ã", "–≠–Ω–µ—Ä–≥–∏—è"]
tea_patterns = ["–ª–∏—Å—Ç", "—Å–µ—Ä–¥—Ü–µ", "–∑–º–µ–π–∫–∞", "—Å–ø–∏—Ä–∞–ª—å", "–∑–≤–µ–∑–¥–∞"]
coin_faces = ["–û—Ä—ë–ª", "–†–µ—à–∫–∞"]

# ====== –ì–æ—Ä–æ—Å–∫–æ–ø ======
astrology_signs = [
    "–û–≤–µ–Ω","–¢–µ–ª–µ—Ü","–ë–ª–∏–∑–Ω–µ—Ü—ã","–†–∞–∫","–õ–µ–≤","–î–µ–≤–∞",
    "–í–µ—Å—ã","–°–∫–æ—Ä–ø–∏–æ–Ω","–°—Ç—Ä–µ–ª–µ—Ü","–ö–æ–∑–µ—Ä–æ–≥","–í–æ–¥–æ–ª–µ–π","–†—ã–±—ã"
]

horoscope_phrases = {}
for sign in astrology_signs:
    horoscope_phrases[sign] = {
        "—ç–Ω–µ—Ä–≥–∏—è": [
            "–°–µ–≥–æ–¥–Ω—è –≤—ã –ø–æ–ª–Ω—ã —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å–∏–ª.",
            "–í–∞—Å –∂–¥—É—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–∏–≤—ã —ç–Ω–µ—Ä–≥–∏–∏.",
            "–î–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."
        ],
        "—Ä–∞–±–æ—Ç–∞": [
            "–ù–∞ —Ä–∞–±–æ—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
            "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö."
        ],
        "–ª—é–±–æ–≤—å": [
            "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –≤–æ–∑–º–æ–∂–Ω—ã —Å–µ–≥–æ–¥–Ω—è.",
            "–û—Ç–Ω–æ—à–µ–Ω–∏—è –º–æ–≥—É—Ç –≤—ã–π—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å."
        ],
        "—Ñ–∏–Ω–∞–Ω—Å—ã": [
            "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–µ–ª–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É—é—Ç—Å—è.",
            "–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏."
        ],
        "–∑–¥–æ—Ä–æ–≤—å–µ": [
            "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.",
            "–ó–∞–π–º–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º –∏ –æ—Ç–¥—ã—Ö–æ–º."
        ]
    }

def generate_horoscope(sign):
    """–í—ã–±–æ—Ä –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ –¥–µ–Ω—å, –º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."""
    parts = horoscope_phrases.get(sign)
    if not parts:
        return "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∑–Ω–∞–∫–∞."
    today = date.today()
    seed = hash(f"{sign}-{today}")
    random.seed(seed)
    selected = {category: random.choice(phrases) for category, phrases in parts.items()}
    text = f"‚ôà –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign} –Ω–∞ {today}:\n\n"
    text += "\n".join(selected.values())
    return text

# ====== –û–ø–∏—Å–∞–Ω–∏—è –≥–∞–¥–∞–Ω–∏–π —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ ======
gadania_info = {
    "–¢–∞—Ä–æ": "üÉè –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –≤–∞—à–µ–π –∂–∏–∑–Ω–∏.\n–°–æ–≤–µ—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ 3 –∫–∞—Ä—Ç—ã ‚Äî –ü—Ä–æ—à–ª–æ–µ, –ù–∞—Å—Ç–æ—è—â–µ–µ, –ë—É–¥—É—â–µ–µ.",
    "–†—É–Ω—ã": "‚ö° –†—É–Ω—ã –Ω–µ—Å—É—Ç —Å–æ–≤–µ—Ç—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è.\n–°–æ–≤–µ—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ 3 —Ä—É–Ω—ã ‚Äî –°–∏—Ç—É–∞—Ü–∏—è, –°–æ–≤–µ—Ç, –ò—Å—Ö–æ–¥.",
    "–û—Ä–∞–∫—É–ª": "üåü –û—Ä–∞–∫—É–ª –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏—è.\n–°–æ–≤–µ—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ 1‚Äì3 –∫–∞—Ä—Ç—ã.",
    "–ò–≥—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã": "üÇ° –û—Ç—Ä–∞–∂–∞—é—Ç —Å–æ–±—ã—Ç–∏—è –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è.\n–°–æ–≤–µ—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ 3 –∫–∞—Ä—Ç—ã.",
    "–ö–æ—Å—Ç–∏": "üé≤ –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –∏—Å—Ö–æ–¥—ã —á–µ—Ä–µ–∑ —á–∏—Å–ª–∞.\n–°–æ–≤–µ—Ç: –±—Ä–æ—Å—å—Ç–µ 2 –∫—É–±–∏–∫–∞.",
    "–ö–æ—Ñ–µ–π–Ω–∞—è –≥—É—â–∞": "‚òï –£–∑–æ—Ä—ã —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç —Å–æ–±—ã—Ç–∏—è.\n–°–æ–≤–µ—Ç: –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –≥—É—â–∏ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —É–∑–æ—Ä.",
    "–ë—É–º–∞–≥–∞": "üìú –î–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.\n–°–æ–≤–µ—Ç: –≤—ã—Ç—è–Ω–∏—Ç–µ –ª–∏—Å—Ç–æ–∫.",
    "–°–ø–∏—á–∫–∏": "üî• –î–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.\n–°–æ–≤–µ—Ç: –≤—ã—Ç—è–Ω–∏—Ç–µ —Å–ø–∏—á–∫—É.",
    "–†–æ–º–∞—à–∫–∞": "üåº '–õ—é–±–∏—Ç/–ù–µ –ª—é–±–∏—Ç'.\n–°–æ–≤–µ—Ç: —Å–æ—Ä–≤–∏—Ç–µ 5 –ª–µ–ø–µ—Å—Ç–∫–æ–≤.",
    "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è": "üåô –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–Ω–∞–∫–∞.\n–°–æ–≤–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞.",
    "–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä": "üîÆ –î–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n–°–æ–≤–µ—Ç: –ø–æ–ª—É—á–∏—Ç–µ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç.",
    "–ö—Ä–∏—Å—Ç–∞–ª–ª—ã": "üíé –†–∞—Å–∫—Ä—ã–≤–∞—é—Ç —Å–æ–≤–µ—Ç—ã —á–µ—Ä–µ–∑ —Ü–≤–µ—Ç.\n–°–æ–≤–µ—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ 1‚Äì3 –∫—Ä–∏—Å—Ç–∞–ª–ª–∞.",
    "–ß–∞–π–Ω—ã–µ –ª–∏—Å—Ç—å—è": "üçµ –£–∑–æ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–æ–±—ã—Ç–∏—è.\n–°–æ–≤–µ—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ 1‚Äì3 —É–∑–æ—Ä–∞.",
    "–ú–æ–Ω–µ—Ç—ã": "ü™ô –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –¥–∞—ë—Ç –æ—Ç–≤–µ—Ç.\n–°–æ–≤–µ—Ç: –ø–æ–¥–±—Ä–æ—Å—å—Ç–µ –º–æ–Ω–µ—Ç—É."
}

dice_meaning = {1:"–Ω–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ",2:"–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ",3:"—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ",4:"—Ç—Ä—É–¥–Ω–æ—Å—Ç–∏",5:"–ø–µ—Ä–µ–º–µ–Ω—ã",6:"—É—Å–ø–µ—Ö"}
cards_meaning = {"‚ô•":"—ç–º–æ—Ü–∏–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è","‚ô¶":"—Ñ–∏–Ω–∞–Ω—Å—ã –∏ –¥–µ–ª–∞","‚ô£":"—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ —Ä–∞–±–æ—Ç–∞","‚ô†":"–ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è"}

# ====== –ê–Ω–∏–º–∞—Ü–∏—è ======
async def shuffle_animation(query: Update.callback_query, theme: str):
    emojis_map = {
        "–¢–∞—Ä–æ": ["üÉè", "üé¥", "‚ú®", "üîÆ"],
        "–†—É–Ω—ã": ["‚ö°", "üî∫","üîª","ü™®"],
        "–û—Ä–∞–∫—É–ª": ["üåü","üí´","üåë","üõ°Ô∏è"],
        "–ò–≥—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã": ["üÇ°","üÇ±","üÉÅ","üÉë"],
        "–ö–æ—Å—Ç–∏": ["üé≤"],
        "–ö–æ—Ñ–µ–π–Ω–∞—è –≥—É—â–∞": ["‚òï"],
        "–ë—É–º–∞–≥–∞": ["üìú"],
        "–°–ø–∏—á–∫–∏": ["ü™µ","üî•"],
        "–†–æ–º–∞—à–∫–∞": ["üåº","üå∏"],
        "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è": ["üåô","‚≠ê","‚òÄÔ∏è"],
        "–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä": ["üîÆ","‚ú®"],
        "–ö—Ä–∏—Å—Ç–∞–ª–ª—ã": ["üíé","üîπ"],
        "–ß–∞–π–Ω—ã–µ –ª–∏—Å—Ç—å—è": ["üçµ","üåø"],
        "–ú–æ–Ω–µ—Ç—ã": ["ü™ô","‚ö™"]
    }
    emojis = emojis_map.get(theme, ["üîÆ"])
    for _ in range(5):
        line = "".join(random.choices(emojis, k=5))
        try:
            await query.edit_message_text(f"üåÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥–∞–¥–∞–Ω–∏—è {theme}...\n{line}")
        except:
            pass
        await asyncio.sleep(0.5)

# ====== –†–∞—Å–∫—Ä—ã—Ç–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏ ======
async def reveal_cards(query: Update.callback_query, spread_type: str, detail=None):
    messages = []

    if spread_type == "–¢–∞—Ä–æ":
        cards = random.sample(list(tarot_cards.keys()), 3)
        positions = ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"]
        for i, card in enumerate(cards):
            orientation = random.choice(["üîº","üîΩ"])
            meaning = tarot_cards[card]["upright"] if orientation=="üîº" else tarot_cards[card]["reversed"]
            messages.append(f"üÉè {positions[i]}: *{card}* {orientation}\n{meaning}")
        messages.append("‚ú® –ò—Ç–æ–≥: –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ–±—â—É—é —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é –∫–∞—Ä—Ç.")

    elif spread_type == "–†—É–Ω—ã":
        chosen = random.sample(list(runes.keys()), 3)
        positions = ["–°–∏—Ç—É–∞—Ü–∏—è","–°–æ–≤–µ—Ç","–ò—Å—Ö–æ–¥"]
        for i,rune in enumerate(chosen):
            orientation = random.choice(["üî∫","üîª"])
            meaning = runes[rune] + (" (–≤–æ–∑–º–æ–∂–Ω—ã —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏)" if orientation=="üîª" else "")
            messages.append(f"‚ö° {positions[i]}: *{rune}* {orientation}\n{meaning}")
        messages.append("‚ú® –ò—Ç–æ–≥: –æ–±–¥—É–º–∞–π—Ç–µ —Å–æ–≤–µ—Ç –∏ –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")

    elif spread_type == "–û—Ä–∞–∫—É–ª":
        chosen = random.sample(list(oracle.keys()), 3)
        positions = ["–ù–∞—Å—Ç–æ—è—â–µ–µ","–ü—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏–µ","–°–æ–≤–µ—Ç"]
        for i,key in enumerate(chosen):
            emoji = random.choice(["üåü","‚öñÔ∏è","üí°","üåë","üõ°Ô∏è"])
            messages.append(f"{emoji} {positions[i]}: *{key}*\n{oracle[key]}")
        messages.append("‚ú® –ò—Ç–æ–≥: –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Å–æ–≤–µ—Ç—ã –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–º.")

    elif spread_type == "–ò–≥—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã":
        selected_cards = [random.choice(cards_deck) for _ in range(3)]
        for i, card in enumerate(selected_cards):
            suit = card.split()[-1]
            meaning = cards_meaning.get(suit, "")
            messages.append(f"üÇ° –ö–∞—Ä—Ç–∞ {i+1}: *{card}* ‚Äî {meaning}")
        messages.append("‚ú® –ò—Ç–æ–≥: –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –æ–±—â—É—é –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç.")

    elif spread_type == "–ö–æ—Å—Ç–∏":
        rolls = [random.choice(dice_faces) for _ in range(2)]
        for i, roll in enumerate(rolls):
            messages.append(f"üé≤ –ö—É–±–∏–∫ {i+1}: {roll} ‚Äî {dice_meaning[roll]}")
        combined = " –∏ ".join([dice_meaning[r] for r in rolls])
        messages.append(f"‚ú® –ò—Ç–æ–≥: –æ–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ ‚Äî {combined}.")

    elif spread_type == "–ö–æ—Ñ–µ–π–Ω–∞—è –≥—É—â–∞":
        chosen = [random.choice(tea_patterns) for _ in range(3)]
        pattern_meaning = {'–ª–∏—Å—Ç':"–≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",'—Å–µ—Ä–¥—Ü–µ':"–ª—é–±–æ–≤—å",'–∑–º–µ–π–∫–∞':"–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è",'—Å–ø–∏—Ä–∞–ª—å':"–¥—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",'–∑–≤–µ–∑–¥–∞':"—É–¥–∞—á–∞"}
        for i, pattern in enumerate(chosen):
            messages.append(f"‚òï –£–∑–æ—Ä {i+1}: *{pattern}* ‚Äî {pattern_meaning[pattern]}")
        messages.append("‚ú® –ò—Ç–æ–≥: —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É —É–∑–æ—Ä–æ–≤.")

    elif spread_type == "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è" and detail:
        messages.append(generate_horoscope(detail))

    elif spread_type == "–ë—É–º–∞–≥–∞":
        answer = random.choice(paper_answers)
        messages.append(f"üìú –û—Ç–≤–µ—Ç: *{answer}*")

    elif spread_type == "–°–ø–∏—á–∫–∏":
        answer = random.choice(matches_answers)
        messages.append(f"üî• –û—Ç–≤–µ—Ç: *{answer}*")

    elif spread_type == "–†–æ–º–∞—à–∫–∞":
        results = [random.choice(flower_answers) for _ in range(5)]
        for i, answer in enumerate(results):
            messages.append(f"üåº –õ–µ–ø–µ—Å—Ç–æ–∫ {i+1}: {answer}")
        love_count = sum(1 for r in results if "–õ—é–±–∏—Ç" in r)
        not_love_count = sum(1 for r in results if "–ù–µ –ª—é–±–∏—Ç" in r)
        if love_count > not_love_count:
            messages.append("üíñ ‚ú® –ò—Ç–æ–≥: –õ—é–±–∏—Ç")
        elif not_love_count > love_count:
            messages.append("üíî ‚ú® –ò—Ç–æ–≥: –ù–µ –ª—é–±–∏—Ç")
        else:
            messages.append("‚ùî ‚ú® –ò—Ç–æ–≥: –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ")

    elif spread_type == "–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä":
        answer = random.choice(magic_ball_answers)
        messages.append(f"üîÆ –û—Ç–≤–µ—Ç: *{answer}*")

    elif spread_type == "–ö—Ä–∏—Å—Ç–∞–ª–ª—ã":
        chosen = [random.choice(crystal_colors) for _ in range(3)]
        for i, color in enumerate(chosen):
            messages.append(f"üíé –ö—Ä–∏—Å—Ç–∞–ª–ª {i+1}: *{color}*")
        most_common = max(set(chosen), key=chosen.count)
        messages.append(f"‚ú® –ò—Ç–æ–≥: –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ–≤–µ—Ç ‚Äî {most_common}")

    elif spread_type == "–ß–∞–π–Ω—ã–µ –ª–∏—Å—Ç—å—è":
        chosen = [random.choice(tea_patterns) for _ in range(3)]
        pattern_meaning = {'–ª–∏—Å—Ç':"–≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",'—Å–µ—Ä–¥—Ü–µ':"–ª—é–±–æ–≤—å",'–∑–º–µ–π–∫–∞':"–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è",'—Å–ø–∏—Ä–∞–ª—å':"–¥—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",'–∑–≤–µ–∑–¥–∞':"—É–¥–∞—á–∞"}
        for i, pattern in enumerate(chosen):
            messages.append(f"üçµ –£–∑–æ—Ä {i+1}: *{pattern}* ‚Äî {pattern_meaning[pattern]}")
        messages.append("‚ú® –ò—Ç–æ–≥: –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É —É–∑–æ—Ä–æ–≤.")

    elif spread_type == "–ú–æ–Ω–µ—Ç—ã":
        face = random.choice(coin_faces)
        meaning = "—É—Å–ø–µ—Ö" if face=="–û—Ä—ë–ª" else "—Ç—Ä—É–¥–Ω–æ—Å—Ç–∏"
        messages.append(f"ü™ô –ú–æ–Ω–µ—Ç–∞: *{face}* ‚Äî {meaning}")
        messages.append(f"‚ú® –ò—Ç–æ–≥: {meaning}")

    full_text = "\n\n".join(messages)
    keyboard = [
        [InlineKeyboardButton("–ï—â–µ —Ä–∞—Å–∫–ª–∞–¥ üîÑ", callback_data=f"play_{spread_type}")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", callback_data="menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        await query.edit_message_text(full_text, parse_mode="Markdown", reply_markup=reply_markup)
    except:
        try:
            await query.message.reply_text(full_text, parse_mode="Markdown", reply_markup=reply_markup)
        except:
            pass

# ====== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ======
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(f"–ö–∞—Ä—Ç—ã –¢–∞—Ä–æ üÉè", callback_data="info_–¢–∞—Ä–æ")],
        [InlineKeyboardButton("–†—É–Ω—ã ‚ö°", callback_data="info_–†—É–Ω—ã")],
        [InlineKeyboardButton("–û—Ä–∞–∫—É–ª üåü", callback_data="info_–û—Ä–∞–∫—É–ª")],
        [InlineKeyboardButton("–ò–≥—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã üÇ°", callback_data="info_–ò–≥—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã")],
        [InlineKeyboardButton("–ö–æ—Å—Ç–∏ üé≤", callback_data="info_–ö–æ—Å—Ç–∏")],
        [InlineKeyboardButton("–ö–æ—Ñ–µ–π–Ω–∞—è –≥—É—â–∞ ‚òï", callback_data="info_–ö–æ—Ñ–µ–π–Ω–∞—è –≥—É—â–∞")],
        [InlineKeyboardButton("–ë—É–º–∞–≥–∞ üìú", callback_data="info_–ë—É–º–∞–≥–∞")],
        [InlineKeyboardButton("–°–ø–∏—á–∫–∏ üî•", callback_data="info_–°–ø–∏—á–∫–∏")],
        [InlineKeyboardButton("–†–æ–º–∞—à–∫–∞ üåº", callback_data="info_–†–æ–º–∞—à–∫–∞")],
        [InlineKeyboardButton("–ì–æ—Ä–æ—Å–∫–æ–ø üåô", callback_data="choose_sign")],
        [InlineKeyboardButton("–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä üîÆ", callback_data="info_–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä")],
        [InlineKeyboardButton("–ö—Ä–∏—Å—Ç–∞–ª–ª—ã üíé", callback_data="info_–ö—Ä–∏—Å—Ç–∞–ª–ª—ã")],
        [InlineKeyboardButton("–ß–∞–π–Ω—ã–µ –ª–∏—Å—Ç—å—è üçµ", callback_data="info_–ß–∞–π–Ω—ã–µ –ª–∏—Å—Ç—å—è")],
        [InlineKeyboardButton("–ú–æ–Ω–µ—Ç—ã ü™ô", callback_data="info_–ú–æ–Ω–µ—Ç—ã")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–∞–¥–∞–Ω–∏–µ:", reply_markup=reply_markup)
    else:
        await update.message.reply_text(
            "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∏—Å–∫–∞—Ç–µ–ª—å –∏—Å—Ç–∏–Ω—ã!\n\n"
            "–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ä–∞–∫—É–ª.\n"
            "–ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω–æ –∏–∑ –≥–∞–¥–∞–Ω–∏–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥:",
            reply_markup=reply_markup
        )

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ======
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    try:
        await query.answer()
    except:
        pass

    data = query.data

    if data == "menu":
        await show_main_menu(update, context)
        return

    if data.startswith("info_"):
        gadanie = data.split("_")[1]
        info_text = gadania_info.get(gadanie, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ì–∞–¥–∞—Ç—å üîÆ", callback_data=f"play_{gadanie}")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", callback_data="menu")]
        ])
        await query.edit_message_text(info_text, reply_markup=keyboard)
        return

    if data == "choose_sign":
        keyboard = [[InlineKeyboardButton(sign, callback_data=f"play_–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è_{sign}")] for sign in astrology_signs]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=reply_markup)
        return

    if data.startswith("play_"):
        parts = data.split("_")
        gadanie = parts[1]
        detail = parts[2] if len(parts) > 2 else None
        await shuffle_animation(query, gadanie)
        await reveal_cards(query, gadanie, detail)
        return

# ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======
if __name__ == "__main__":
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        raise ValueError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN")

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", show_main_menu))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
